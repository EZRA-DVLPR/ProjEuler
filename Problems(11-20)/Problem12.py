# Problem Description
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#       1: 1
#       3: 1, 3
#       6: 1, 2, 3, 6
#       10: 1, 2, 5, 10
#       15: 1, 3, 5, 15
#       21: 1, 3, 7, 21
#       28: 1, 2, 4, 7, 14, 28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the first triangle number to have over five hundred divisors?
# #######################################################################

# Create a generator of Triangle Numbers
def triangleNum():
    currNum = 0
    currSum = 0
    while True:
        yield currSum
        currNum += 1
        currSum += currNum

# return the number of divisors for a given number
def getNumDivisors(n):
    numDiv = 0
    i = 1
    while i <= n:
        if n % i == 0:
            numDiv += 1
        i += 1
    return numDiv

# Create the generator object of Triangle Numbers
generator = triangleNum()

# save the first generated triangle number
currTriNum = next(generator)

# keep going until the number of divisors is > 500
while (getNumDivisors(currTriNum) <= 500):
    currTriNum = next(generator)

print("First tri num with more than 500 divisors is", currTriNum)

# This took a mega long time. To reduce the amount of time it takes, do some good mathematical analysis like the solution below.
# https://euler.beerbaronbill.com/en/latest/solutions/12.html