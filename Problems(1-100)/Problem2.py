# Problem Description
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#######################################################################

import numpy as np

#create fibonacci sequence
def fibonacci():
    fibList = np.array([1, 2])

    currVal = 3
    currIndex = 2

    runSum = 2

    while (currVal <= 4000000):
        #generate new value
        currVal = fibList[currIndex - 1] + fibList[currIndex - 2]

        #if even and within bounds then add to sum 
        if ((currVal % 2 == 0) and (currVal <= 4000000)):
            runSum += currVal

        #append new value to fb list
        fibList = np.append(fibList, currVal)

        currIndex += 1

    for fibNum in fibList:
        print(f"fibNum is {fibNum}, ", sep='')

    return(runSum)

print(fibonacci())